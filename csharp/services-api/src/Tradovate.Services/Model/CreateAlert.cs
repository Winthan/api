/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// CreateAlert
    /// </summary>
    [DataContract]
    public partial class CreateAlert :  IEquatable<CreateAlert>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAlert" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAlert() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAlert" /> class.
        /// </summary>
        /// <param name="Expression">Expression (required).</param>
        /// <param name="ValidUntil">ValidUntil.</param>
        /// <param name="TriggerLimits">TriggerLimits.</param>
        /// <param name="Message">Message.</param>
        public CreateAlert(string Expression = null, DateTime? ValidUntil = null, int? TriggerLimits = null, string Message = null)
        {
            // to ensure "Expression" is required (not null)
            if (Expression == null)
            {
                throw new InvalidDataException("Expression is a required property for CreateAlert and cannot be null");
            }
            else
            {
                this.Expression = Expression;
            }
            this.ValidUntil = ValidUntil;
            this.TriggerLimits = TriggerLimits;
            this.Message = Message;
        }
        
        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }
        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [DataMember(Name="validUntil", EmitDefaultValue=false)]
        public DateTime? ValidUntil { get; set; }
        /// <summary>
        /// Gets or Sets TriggerLimits
        /// </summary>
        [DataMember(Name="triggerLimits", EmitDefaultValue=false)]
        public int? TriggerLimits { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAlert {\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  TriggerLimits: ").Append(TriggerLimits).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateAlert);
        }

        /// <summary>
        /// Returns true if CreateAlert instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAlert other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Expression == other.Expression ||
                    this.Expression != null &&
                    this.Expression.Equals(other.Expression)
                ) && 
                (
                    this.ValidUntil == other.ValidUntil ||
                    this.ValidUntil != null &&
                    this.ValidUntil.Equals(other.ValidUntil)
                ) && 
                (
                    this.TriggerLimits == other.TriggerLimits ||
                    this.TriggerLimits != null &&
                    this.TriggerLimits.Equals(other.TriggerLimits)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Expression != null)
                    hash = hash * 59 + this.Expression.GetHashCode();
                if (this.ValidUntil != null)
                    hash = hash * 59 + this.ValidUntil.GetHashCode();
                if (this.TriggerLimits != null)
                    hash = hash * 59 + this.TriggerLimits.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                return hash;
            }
        }
    }

}
