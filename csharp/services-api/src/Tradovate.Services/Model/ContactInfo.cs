/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ContactInfo
    /// </summary>
    [DataContract]
    public partial class ContactInfo :  IEquatable<ContactInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfo" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="UserId">id of User (required).</param>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="StreetAddress1">StreetAddress1 (required).</param>
        /// <param name="StreetAddress2">StreetAddress2.</param>
        /// <param name="City">City (required).</param>
        /// <param name="State">State.</param>
        /// <param name="PostCode">PostCode.</param>
        /// <param name="Country">Country (required).</param>
        /// <param name="Phone">Phone (required).</param>
        /// <param name="MailingIsDifferent">MailingIsDifferent.</param>
        /// <param name="MailingStreetAddress1">MailingStreetAddress1.</param>
        /// <param name="MailingStreetAddress2">MailingStreetAddress2.</param>
        /// <param name="MailingCity">MailingCity.</param>
        /// <param name="MailingState">MailingState.</param>
        /// <param name="MailingPostCode">MailingPostCode.</param>
        /// <param name="MailingCountry">MailingCountry.</param>
        public ContactInfo(int? Id = null, int? UserId = null, string FirstName = null, string LastName = null, string StreetAddress1 = null, string StreetAddress2 = null, string City = null, string State = null, string PostCode = null, string Country = null, string Phone = null, bool? MailingIsDifferent = null, string MailingStreetAddress1 = null, string MailingStreetAddress2 = null, string MailingCity = null, string MailingState = null, string MailingPostCode = null, string MailingCountry = null)
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "StreetAddress1" is required (not null)
            if (StreetAddress1 == null)
            {
                throw new InvalidDataException("StreetAddress1 is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.StreetAddress1 = StreetAddress1;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "Phone" is required (not null)
            if (Phone == null)
            {
                throw new InvalidDataException("Phone is a required property for ContactInfo and cannot be null");
            }
            else
            {
                this.Phone = Phone;
            }
            this.Id = Id;
            this.StreetAddress2 = StreetAddress2;
            this.State = State;
            this.PostCode = PostCode;
            this.MailingIsDifferent = MailingIsDifferent;
            this.MailingStreetAddress1 = MailingStreetAddress1;
            this.MailingStreetAddress2 = MailingStreetAddress2;
            this.MailingCity = MailingCity;
            this.MailingState = MailingState;
            this.MailingPostCode = MailingPostCode;
            this.MailingCountry = MailingCountry;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets StreetAddress1
        /// </summary>
        [DataMember(Name="streetAddress1", EmitDefaultValue=false)]
        public string StreetAddress1 { get; set; }
        /// <summary>
        /// Gets or Sets StreetAddress2
        /// </summary>
        [DataMember(Name="streetAddress2", EmitDefaultValue=false)]
        public string StreetAddress2 { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name="postCode", EmitDefaultValue=false)]
        public string PostCode { get; set; }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets MailingIsDifferent
        /// </summary>
        [DataMember(Name="mailingIsDifferent", EmitDefaultValue=false)]
        public bool? MailingIsDifferent { get; set; }
        /// <summary>
        /// Gets or Sets MailingStreetAddress1
        /// </summary>
        [DataMember(Name="mailingStreetAddress1", EmitDefaultValue=false)]
        public string MailingStreetAddress1 { get; set; }
        /// <summary>
        /// Gets or Sets MailingStreetAddress2
        /// </summary>
        [DataMember(Name="mailingStreetAddress2", EmitDefaultValue=false)]
        public string MailingStreetAddress2 { get; set; }
        /// <summary>
        /// Gets or Sets MailingCity
        /// </summary>
        [DataMember(Name="mailingCity", EmitDefaultValue=false)]
        public string MailingCity { get; set; }
        /// <summary>
        /// Gets or Sets MailingState
        /// </summary>
        [DataMember(Name="mailingState", EmitDefaultValue=false)]
        public string MailingState { get; set; }
        /// <summary>
        /// Gets or Sets MailingPostCode
        /// </summary>
        [DataMember(Name="mailingPostCode", EmitDefaultValue=false)]
        public string MailingPostCode { get; set; }
        /// <summary>
        /// Gets or Sets MailingCountry
        /// </summary>
        [DataMember(Name="mailingCountry", EmitDefaultValue=false)]
        public string MailingCountry { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  StreetAddress1: ").Append(StreetAddress1).Append("\n");
            sb.Append("  StreetAddress2: ").Append(StreetAddress2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  MailingIsDifferent: ").Append(MailingIsDifferent).Append("\n");
            sb.Append("  MailingStreetAddress1: ").Append(MailingStreetAddress1).Append("\n");
            sb.Append("  MailingStreetAddress2: ").Append(MailingStreetAddress2).Append("\n");
            sb.Append("  MailingCity: ").Append(MailingCity).Append("\n");
            sb.Append("  MailingState: ").Append(MailingState).Append("\n");
            sb.Append("  MailingPostCode: ").Append(MailingPostCode).Append("\n");
            sb.Append("  MailingCountry: ").Append(MailingCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContactInfo);
        }

        /// <summary>
        /// Returns true if ContactInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.StreetAddress1 == other.StreetAddress1 ||
                    this.StreetAddress1 != null &&
                    this.StreetAddress1.Equals(other.StreetAddress1)
                ) && 
                (
                    this.StreetAddress2 == other.StreetAddress2 ||
                    this.StreetAddress2 != null &&
                    this.StreetAddress2.Equals(other.StreetAddress2)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.PostCode == other.PostCode ||
                    this.PostCode != null &&
                    this.PostCode.Equals(other.PostCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.MailingIsDifferent == other.MailingIsDifferent ||
                    this.MailingIsDifferent != null &&
                    this.MailingIsDifferent.Equals(other.MailingIsDifferent)
                ) && 
                (
                    this.MailingStreetAddress1 == other.MailingStreetAddress1 ||
                    this.MailingStreetAddress1 != null &&
                    this.MailingStreetAddress1.Equals(other.MailingStreetAddress1)
                ) && 
                (
                    this.MailingStreetAddress2 == other.MailingStreetAddress2 ||
                    this.MailingStreetAddress2 != null &&
                    this.MailingStreetAddress2.Equals(other.MailingStreetAddress2)
                ) && 
                (
                    this.MailingCity == other.MailingCity ||
                    this.MailingCity != null &&
                    this.MailingCity.Equals(other.MailingCity)
                ) && 
                (
                    this.MailingState == other.MailingState ||
                    this.MailingState != null &&
                    this.MailingState.Equals(other.MailingState)
                ) && 
                (
                    this.MailingPostCode == other.MailingPostCode ||
                    this.MailingPostCode != null &&
                    this.MailingPostCode.Equals(other.MailingPostCode)
                ) && 
                (
                    this.MailingCountry == other.MailingCountry ||
                    this.MailingCountry != null &&
                    this.MailingCountry.Equals(other.MailingCountry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.StreetAddress1 != null)
                    hash = hash * 59 + this.StreetAddress1.GetHashCode();
                if (this.StreetAddress2 != null)
                    hash = hash * 59 + this.StreetAddress2.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.PostCode != null)
                    hash = hash * 59 + this.PostCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.MailingIsDifferent != null)
                    hash = hash * 59 + this.MailingIsDifferent.GetHashCode();
                if (this.MailingStreetAddress1 != null)
                    hash = hash * 59 + this.MailingStreetAddress1.GetHashCode();
                if (this.MailingStreetAddress2 != null)
                    hash = hash * 59 + this.MailingStreetAddress2.GetHashCode();
                if (this.MailingCity != null)
                    hash = hash * 59 + this.MailingCity.GetHashCode();
                if (this.MailingState != null)
                    hash = hash * 59 + this.MailingState.GetHashCode();
                if (this.MailingPostCode != null)
                    hash = hash * 59 + this.MailingPostCode.GetHashCode();
                if (this.MailingCountry != null)
                    hash = hash * 59 + this.MailingCountry.GetHashCode();
                return hash;
            }
        }
    }

}
