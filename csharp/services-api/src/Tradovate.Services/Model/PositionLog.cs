/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// PositionLog
    /// </summary>
    [DataContract]
    public partial class PositionLog :  IEquatable<PositionLog>
    {
        /// <summary>
        /// CancelledTrade, NewSession, PriceAdjustment, Reconciliation, Trade
        /// </summary>
        /// <value>CancelledTrade, NewSession, PriceAdjustment, Reconciliation, Trade</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionChangeTypeEnum
        {
            
            /// <summary>
            /// Enum Trade for "Trade"
            /// </summary>
            [EnumMember(Value = "Trade")]
            Trade,
            
            /// <summary>
            /// Enum NewSession for "NewSession"
            /// </summary>
            [EnumMember(Value = "NewSession")]
            NewSession,
            
            /// <summary>
            /// Enum PriceAdjustment for "PriceAdjustment"
            /// </summary>
            [EnumMember(Value = "PriceAdjustment")]
            PriceAdjustment,
            
            /// <summary>
            /// Enum Reconciliation for "Reconciliation"
            /// </summary>
            [EnumMember(Value = "Reconciliation")]
            Reconciliation,
            
            /// <summary>
            /// Enum CancelledTrade for "CancelledTrade"
            /// </summary>
            [EnumMember(Value = "CancelledTrade")]
            CancelledTrade
        }

        /// <summary>
        /// CancelledTrade, NewSession, PriceAdjustment, Reconciliation, Trade
        /// </summary>
        /// <value>CancelledTrade, NewSession, PriceAdjustment, Reconciliation, Trade</value>
        [DataMember(Name="positionChangeType", EmitDefaultValue=false)]
        public PositionChangeTypeEnum? PositionChangeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PositionLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionLog" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="AccountId">id of Account (required).</param>
        /// <param name="ContractId">id of Contract (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="TradeDate">TradeDate (required).</param>
        /// <param name="NetPos">NetPos (required).</param>
        /// <param name="NetPrice">NetPrice.</param>
        /// <param name="Bought">Bought (required).</param>
        /// <param name="BoughtValue">BoughtValue (required).</param>
        /// <param name="Sold">Sold (required).</param>
        /// <param name="SoldValue">SoldValue (required).</param>
        /// <param name="PositionChangeType">CancelledTrade, NewSession, PriceAdjustment, Reconciliation, Trade (required).</param>
        /// <param name="FillId">id of Fill.</param>
        public PositionLog(int? Id = null, int? AccountId = null, int? ContractId = null, DateTime? Timestamp = null, TradeDate TradeDate = null, int? NetPos = null, double? NetPrice = null, int? Bought = null, double? BoughtValue = null, int? Sold = null, double? SoldValue = null, PositionChangeTypeEnum? PositionChangeType = null, int? FillId = null)
        {
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "ContractId" is required (not null)
            if (ContractId == null)
            {
                throw new InvalidDataException("ContractId is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.ContractId = ContractId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "TradeDate" is required (not null)
            if (TradeDate == null)
            {
                throw new InvalidDataException("TradeDate is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.TradeDate = TradeDate;
            }
            // to ensure "NetPos" is required (not null)
            if (NetPos == null)
            {
                throw new InvalidDataException("NetPos is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.NetPos = NetPos;
            }
            // to ensure "Bought" is required (not null)
            if (Bought == null)
            {
                throw new InvalidDataException("Bought is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.Bought = Bought;
            }
            // to ensure "BoughtValue" is required (not null)
            if (BoughtValue == null)
            {
                throw new InvalidDataException("BoughtValue is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.BoughtValue = BoughtValue;
            }
            // to ensure "Sold" is required (not null)
            if (Sold == null)
            {
                throw new InvalidDataException("Sold is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.Sold = Sold;
            }
            // to ensure "SoldValue" is required (not null)
            if (SoldValue == null)
            {
                throw new InvalidDataException("SoldValue is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.SoldValue = SoldValue;
            }
            // to ensure "PositionChangeType" is required (not null)
            if (PositionChangeType == null)
            {
                throw new InvalidDataException("PositionChangeType is a required property for PositionLog and cannot be null");
            }
            else
            {
                this.PositionChangeType = PositionChangeType;
            }
            this.Id = Id;
            this.NetPrice = NetPrice;
            this.FillId = FillId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// id of Contract
        /// </summary>
        /// <value>id of Contract</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public int? ContractId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets TradeDate
        /// </summary>
        [DataMember(Name="tradeDate", EmitDefaultValue=false)]
        public TradeDate TradeDate { get; set; }
        /// <summary>
        /// Gets or Sets NetPos
        /// </summary>
        [DataMember(Name="netPos", EmitDefaultValue=false)]
        public int? NetPos { get; set; }
        /// <summary>
        /// Gets or Sets NetPrice
        /// </summary>
        [DataMember(Name="netPrice", EmitDefaultValue=false)]
        public double? NetPrice { get; set; }
        /// <summary>
        /// Gets or Sets Bought
        /// </summary>
        [DataMember(Name="bought", EmitDefaultValue=false)]
        public int? Bought { get; set; }
        /// <summary>
        /// Gets or Sets BoughtValue
        /// </summary>
        [DataMember(Name="boughtValue", EmitDefaultValue=false)]
        public double? BoughtValue { get; set; }
        /// <summary>
        /// Gets or Sets Sold
        /// </summary>
        [DataMember(Name="sold", EmitDefaultValue=false)]
        public int? Sold { get; set; }
        /// <summary>
        /// Gets or Sets SoldValue
        /// </summary>
        [DataMember(Name="soldValue", EmitDefaultValue=false)]
        public double? SoldValue { get; set; }
        /// <summary>
        /// id of Fill
        /// </summary>
        /// <value>id of Fill</value>
        [DataMember(Name="fillId", EmitDefaultValue=false)]
        public int? FillId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PositionLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  NetPos: ").Append(NetPos).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  Bought: ").Append(Bought).Append("\n");
            sb.Append("  BoughtValue: ").Append(BoughtValue).Append("\n");
            sb.Append("  Sold: ").Append(Sold).Append("\n");
            sb.Append("  SoldValue: ").Append(SoldValue).Append("\n");
            sb.Append("  PositionChangeType: ").Append(PositionChangeType).Append("\n");
            sb.Append("  FillId: ").Append(FillId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PositionLog);
        }

        /// <summary>
        /// Returns true if PositionLog instances are equal
        /// </summary>
        /// <param name="other">Instance of PositionLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PositionLog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ContractId == other.ContractId ||
                    this.ContractId != null &&
                    this.ContractId.Equals(other.ContractId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.TradeDate == other.TradeDate ||
                    this.TradeDate != null &&
                    this.TradeDate.Equals(other.TradeDate)
                ) && 
                (
                    this.NetPos == other.NetPos ||
                    this.NetPos != null &&
                    this.NetPos.Equals(other.NetPos)
                ) && 
                (
                    this.NetPrice == other.NetPrice ||
                    this.NetPrice != null &&
                    this.NetPrice.Equals(other.NetPrice)
                ) && 
                (
                    this.Bought == other.Bought ||
                    this.Bought != null &&
                    this.Bought.Equals(other.Bought)
                ) && 
                (
                    this.BoughtValue == other.BoughtValue ||
                    this.BoughtValue != null &&
                    this.BoughtValue.Equals(other.BoughtValue)
                ) && 
                (
                    this.Sold == other.Sold ||
                    this.Sold != null &&
                    this.Sold.Equals(other.Sold)
                ) && 
                (
                    this.SoldValue == other.SoldValue ||
                    this.SoldValue != null &&
                    this.SoldValue.Equals(other.SoldValue)
                ) && 
                (
                    this.PositionChangeType == other.PositionChangeType ||
                    this.PositionChangeType != null &&
                    this.PositionChangeType.Equals(other.PositionChangeType)
                ) && 
                (
                    this.FillId == other.FillId ||
                    this.FillId != null &&
                    this.FillId.Equals(other.FillId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ContractId != null)
                    hash = hash * 59 + this.ContractId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.TradeDate != null)
                    hash = hash * 59 + this.TradeDate.GetHashCode();
                if (this.NetPos != null)
                    hash = hash * 59 + this.NetPos.GetHashCode();
                if (this.NetPrice != null)
                    hash = hash * 59 + this.NetPrice.GetHashCode();
                if (this.Bought != null)
                    hash = hash * 59 + this.Bought.GetHashCode();
                if (this.BoughtValue != null)
                    hash = hash * 59 + this.BoughtValue.GetHashCode();
                if (this.Sold != null)
                    hash = hash * 59 + this.Sold.GetHashCode();
                if (this.SoldValue != null)
                    hash = hash * 59 + this.SoldValue.GetHashCode();
                if (this.PositionChangeType != null)
                    hash = hash * 59 + this.PositionChangeType.GetHashCode();
                if (this.FillId != null)
                    hash = hash * 59 + this.FillId.GetHashCode();
                return hash;
            }
        }
    }

}
