/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// FillPair
    /// </summary>
    [DataContract]
    public partial class FillPair :  IEquatable<FillPair>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FillPair" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FillPair() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FillPair" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="PositionId">id of Position (required).</param>
        /// <param name="BuyFillId">id of Fill (required).</param>
        /// <param name="SellFillId">id of Fill (required).</param>
        /// <param name="Qty">Qty (required).</param>
        /// <param name="BuyPrice">BuyPrice (required).</param>
        /// <param name="SellPrice">SellPrice (required).</param>
        /// <param name="Active">Active (required).</param>
        public FillPair(int? Id = null, int? PositionId = null, int? BuyFillId = null, int? SellFillId = null, int? Qty = null, double? BuyPrice = null, double? SellPrice = null, bool? Active = null)
        {
            // to ensure "PositionId" is required (not null)
            if (PositionId == null)
            {
                throw new InvalidDataException("PositionId is a required property for FillPair and cannot be null");
            }
            else
            {
                this.PositionId = PositionId;
            }
            // to ensure "BuyFillId" is required (not null)
            if (BuyFillId == null)
            {
                throw new InvalidDataException("BuyFillId is a required property for FillPair and cannot be null");
            }
            else
            {
                this.BuyFillId = BuyFillId;
            }
            // to ensure "SellFillId" is required (not null)
            if (SellFillId == null)
            {
                throw new InvalidDataException("SellFillId is a required property for FillPair and cannot be null");
            }
            else
            {
                this.SellFillId = SellFillId;
            }
            // to ensure "Qty" is required (not null)
            if (Qty == null)
            {
                throw new InvalidDataException("Qty is a required property for FillPair and cannot be null");
            }
            else
            {
                this.Qty = Qty;
            }
            // to ensure "BuyPrice" is required (not null)
            if (BuyPrice == null)
            {
                throw new InvalidDataException("BuyPrice is a required property for FillPair and cannot be null");
            }
            else
            {
                this.BuyPrice = BuyPrice;
            }
            // to ensure "SellPrice" is required (not null)
            if (SellPrice == null)
            {
                throw new InvalidDataException("SellPrice is a required property for FillPair and cannot be null");
            }
            else
            {
                this.SellPrice = SellPrice;
            }
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for FillPair and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Position
        /// </summary>
        /// <value>id of Position</value>
        [DataMember(Name="positionId", EmitDefaultValue=false)]
        public int? PositionId { get; set; }
        /// <summary>
        /// id of Fill
        /// </summary>
        /// <value>id of Fill</value>
        [DataMember(Name="buyFillId", EmitDefaultValue=false)]
        public int? BuyFillId { get; set; }
        /// <summary>
        /// id of Fill
        /// </summary>
        /// <value>id of Fill</value>
        [DataMember(Name="sellFillId", EmitDefaultValue=false)]
        public int? SellFillId { get; set; }
        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="qty", EmitDefaultValue=false)]
        public int? Qty { get; set; }
        /// <summary>
        /// Gets or Sets BuyPrice
        /// </summary>
        [DataMember(Name="buyPrice", EmitDefaultValue=false)]
        public double? BuyPrice { get; set; }
        /// <summary>
        /// Gets or Sets SellPrice
        /// </summary>
        [DataMember(Name="sellPrice", EmitDefaultValue=false)]
        public double? SellPrice { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FillPair {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  BuyFillId: ").Append(BuyFillId).Append("\n");
            sb.Append("  SellFillId: ").Append(SellFillId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  BuyPrice: ").Append(BuyPrice).Append("\n");
            sb.Append("  SellPrice: ").Append(SellPrice).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FillPair);
        }

        /// <summary>
        /// Returns true if FillPair instances are equal
        /// </summary>
        /// <param name="other">Instance of FillPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FillPair other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.PositionId == other.PositionId ||
                    this.PositionId != null &&
                    this.PositionId.Equals(other.PositionId)
                ) && 
                (
                    this.BuyFillId == other.BuyFillId ||
                    this.BuyFillId != null &&
                    this.BuyFillId.Equals(other.BuyFillId)
                ) && 
                (
                    this.SellFillId == other.SellFillId ||
                    this.SellFillId != null &&
                    this.SellFillId.Equals(other.SellFillId)
                ) && 
                (
                    this.Qty == other.Qty ||
                    this.Qty != null &&
                    this.Qty.Equals(other.Qty)
                ) && 
                (
                    this.BuyPrice == other.BuyPrice ||
                    this.BuyPrice != null &&
                    this.BuyPrice.Equals(other.BuyPrice)
                ) && 
                (
                    this.SellPrice == other.SellPrice ||
                    this.SellPrice != null &&
                    this.SellPrice.Equals(other.SellPrice)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.PositionId != null)
                    hash = hash * 59 + this.PositionId.GetHashCode();
                if (this.BuyFillId != null)
                    hash = hash * 59 + this.BuyFillId.GetHashCode();
                if (this.SellFillId != null)
                    hash = hash * 59 + this.SellFillId.GetHashCode();
                if (this.Qty != null)
                    hash = hash * 59 + this.Qty.GetHashCode();
                if (this.BuyPrice != null)
                    hash = hash * 59 + this.BuyPrice.GetHashCode();
                if (this.SellPrice != null)
                    hash = hash * 59 + this.SellPrice.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                return hash;
            }
        }
    }

}
