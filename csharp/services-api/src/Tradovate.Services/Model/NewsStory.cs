/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// NewsStory
    /// </summary>
    [DataContract]
    public partial class NewsStory :  IEquatable<NewsStory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewsStory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewsStory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewsStory" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Author">Author (required).</param>
        /// <param name="Created">Created (required).</param>
        /// <param name="Updated">Updated (required).</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="Teaser">Teaser.</param>
        /// <param name="Body">Body.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Source">Source.</param>
        /// <param name="Images">Images.</param>
        /// <param name="Channels">Channels.</param>
        /// <param name="Stocks">Stocks.</param>
        /// <param name="Tags">Tags.</param>
        public NewsStory(int? Id = null, DateTime? Timestamp = null, string Name = null, string Author = null, DateTime? Created = null, DateTime? Updated = null, string Title = null, string Teaser = null, string Body = null, string Url = null, string Source = null, string Images = null, string Channels = null, string Stocks = null, string Tags = null)
        {
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for NewsStory and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for NewsStory and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Author" is required (not null)
            if (Author == null)
            {
                throw new InvalidDataException("Author is a required property for NewsStory and cannot be null");
            }
            else
            {
                this.Author = Author;
            }
            // to ensure "Created" is required (not null)
            if (Created == null)
            {
                throw new InvalidDataException("Created is a required property for NewsStory and cannot be null");
            }
            else
            {
                this.Created = Created;
            }
            // to ensure "Updated" is required (not null)
            if (Updated == null)
            {
                throw new InvalidDataException("Updated is a required property for NewsStory and cannot be null");
            }
            else
            {
                this.Updated = Updated;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for NewsStory and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            this.Id = Id;
            this.Teaser = Teaser;
            this.Body = Body;
            this.Url = Url;
            this.Source = Source;
            this.Images = Images;
            this.Channels = Channels;
            this.Stocks = Stocks;
            this.Tags = Tags;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Teaser
        /// </summary>
        [DataMember(Name="teaser", EmitDefaultValue=false)]
        public string Teaser { get; set; }
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public string Images { get; set; }
        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [DataMember(Name="channels", EmitDefaultValue=false)]
        public string Channels { get; set; }
        /// <summary>
        /// Gets or Sets Stocks
        /// </summary>
        [DataMember(Name="stocks", EmitDefaultValue=false)]
        public string Stocks { get; set; }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewsStory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Teaser: ").Append(Teaser).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  Stocks: ").Append(Stocks).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NewsStory);
        }

        /// <summary>
        /// Returns true if NewsStory instances are equal
        /// </summary>
        /// <param name="other">Instance of NewsStory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewsStory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Author == other.Author ||
                    this.Author != null &&
                    this.Author.Equals(other.Author)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Teaser == other.Teaser ||
                    this.Teaser != null &&
                    this.Teaser.Equals(other.Teaser)
                ) && 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.Images == other.Images ||
                    this.Images != null &&
                    this.Images.Equals(other.Images)
                ) && 
                (
                    this.Channels == other.Channels ||
                    this.Channels != null &&
                    this.Channels.Equals(other.Channels)
                ) && 
                (
                    this.Stocks == other.Stocks ||
                    this.Stocks != null &&
                    this.Stocks.Equals(other.Stocks)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Author != null)
                    hash = hash * 59 + this.Author.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Teaser != null)
                    hash = hash * 59 + this.Teaser.GetHashCode();
                if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Images != null)
                    hash = hash * 59 + this.Images.GetHashCode();
                if (this.Channels != null)
                    hash = hash * 59 + this.Channels.GetHashCode();
                if (this.Stocks != null)
                    hash = hash * 59 + this.Stocks.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                return hash;
            }
        }
    }

}
