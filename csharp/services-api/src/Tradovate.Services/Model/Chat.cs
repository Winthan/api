/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Chat
    /// </summary>
    [DataContract]
    public partial class Chat :  IEquatable<Chat>
    {
        /// <summary>
        /// Support, TradeDesk
        /// </summary>
        /// <value>Support, TradeDesk</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum Support for "Support"
            /// </summary>
            [EnumMember(Value = "Support")]
            Support,
            
            /// <summary>
            /// Enum TradeDesk for "TradeDesk"
            /// </summary>
            [EnumMember(Value = "TradeDesk")]
            TradeDesk
        }

        /// <summary>
        /// Support, TradeDesk
        /// </summary>
        /// <value>Support, TradeDesk</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Chat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Chat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Chat" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="UserId">id of User (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="Category">Support, TradeDesk (required).</param>
        /// <param name="AssignedSupportId">id of User.</param>
        /// <param name="ClosedById">id of User.</param>
        /// <param name="CloseTimestamp">CloseTimestamp.</param>
        public Chat(int? Id = null, int? UserId = null, DateTime? Timestamp = null, CategoryEnum? Category = null, int? AssignedSupportId = null, int? ClosedById = null, DateTime? CloseTimestamp = null)
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for Chat and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for Chat and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for Chat and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
            this.Id = Id;
            this.AssignedSupportId = AssignedSupportId;
            this.ClosedById = ClosedById;
            this.CloseTimestamp = CloseTimestamp;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="assignedSupportId", EmitDefaultValue=false)]
        public int? AssignedSupportId { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="closedById", EmitDefaultValue=false)]
        public int? ClosedById { get; set; }
        /// <summary>
        /// Gets or Sets CloseTimestamp
        /// </summary>
        [DataMember(Name="closeTimestamp", EmitDefaultValue=false)]
        public DateTime? CloseTimestamp { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Chat {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AssignedSupportId: ").Append(AssignedSupportId).Append("\n");
            sb.Append("  ClosedById: ").Append(ClosedById).Append("\n");
            sb.Append("  CloseTimestamp: ").Append(CloseTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Chat);
        }

        /// <summary>
        /// Returns true if Chat instances are equal
        /// </summary>
        /// <param name="other">Instance of Chat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Chat other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.AssignedSupportId == other.AssignedSupportId ||
                    this.AssignedSupportId != null &&
                    this.AssignedSupportId.Equals(other.AssignedSupportId)
                ) && 
                (
                    this.ClosedById == other.ClosedById ||
                    this.ClosedById != null &&
                    this.ClosedById.Equals(other.ClosedById)
                ) && 
                (
                    this.CloseTimestamp == other.CloseTimestamp ||
                    this.CloseTimestamp != null &&
                    this.CloseTimestamp.Equals(other.CloseTimestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.AssignedSupportId != null)
                    hash = hash * 59 + this.AssignedSupportId.GetHashCode();
                if (this.ClosedById != null)
                    hash = hash * 59 + this.ClosedById.GetHashCode();
                if (this.CloseTimestamp != null)
                    hash = hash * 59 + this.CloseTimestamp.GetHashCode();
                return hash;
            }
        }
    }

}
