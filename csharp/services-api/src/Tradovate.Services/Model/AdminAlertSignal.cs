/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// AdminAlertSignal
    /// </summary>
    [DataContract]
    public partial class AdminAlertSignal :  IEquatable<AdminAlertSignal>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAlertSignal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdminAlertSignal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAlertSignal" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="AdminAlertId">id of AdminAlert (required).</param>
        /// <param name="RelatedToAccountId">id of Account.</param>
        /// <param name="RelatedToUserId">id of User.</param>
        /// <param name="OwnedByAdminId">id of User.</param>
        /// <param name="Completed">Completed.</param>
        /// <param name="Text">Text (required).</param>
        /// <param name="EmailSent">EmailSent (required).</param>
        /// <param name="SubjectId">SubjectId (required).</param>
        public AdminAlertSignal(int? Id = null, DateTime? Timestamp = null, int? AdminAlertId = null, int? RelatedToAccountId = null, int? RelatedToUserId = null, int? OwnedByAdminId = null, DateTime? Completed = null, string Text = null, bool? EmailSent = null, int? SubjectId = null)
        {
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "AdminAlertId" is required (not null)
            if (AdminAlertId == null)
            {
                throw new InvalidDataException("AdminAlertId is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.AdminAlertId = AdminAlertId;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            // to ensure "EmailSent" is required (not null)
            if (EmailSent == null)
            {
                throw new InvalidDataException("EmailSent is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.EmailSent = EmailSent;
            }
            // to ensure "SubjectId" is required (not null)
            if (SubjectId == null)
            {
                throw new InvalidDataException("SubjectId is a required property for AdminAlertSignal and cannot be null");
            }
            else
            {
                this.SubjectId = SubjectId;
            }
            this.Id = Id;
            this.RelatedToAccountId = RelatedToAccountId;
            this.RelatedToUserId = RelatedToUserId;
            this.OwnedByAdminId = OwnedByAdminId;
            this.Completed = Completed;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// id of AdminAlert
        /// </summary>
        /// <value>id of AdminAlert</value>
        [DataMember(Name="adminAlertId", EmitDefaultValue=false)]
        public int? AdminAlertId { get; set; }
        /// <summary>
        /// id of Account
        /// </summary>
        /// <value>id of Account</value>
        [DataMember(Name="relatedToAccountId", EmitDefaultValue=false)]
        public int? RelatedToAccountId { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="relatedToUserId", EmitDefaultValue=false)]
        public int? RelatedToUserId { get; set; }
        /// <summary>
        /// id of User
        /// </summary>
        /// <value>id of User</value>
        [DataMember(Name="ownedByAdminId", EmitDefaultValue=false)]
        public int? OwnedByAdminId { get; set; }
        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public DateTime? Completed { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets EmailSent
        /// </summary>
        [DataMember(Name="emailSent", EmitDefaultValue=false)]
        public bool? EmailSent { get; set; }
        /// <summary>
        /// Gets or Sets SubjectId
        /// </summary>
        [DataMember(Name="subjectId", EmitDefaultValue=false)]
        public int? SubjectId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminAlertSignal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AdminAlertId: ").Append(AdminAlertId).Append("\n");
            sb.Append("  RelatedToAccountId: ").Append(RelatedToAccountId).Append("\n");
            sb.Append("  RelatedToUserId: ").Append(RelatedToUserId).Append("\n");
            sb.Append("  OwnedByAdminId: ").Append(OwnedByAdminId).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  EmailSent: ").Append(EmailSent).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminAlertSignal);
        }

        /// <summary>
        /// Returns true if AdminAlertSignal instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminAlertSignal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminAlertSignal other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.AdminAlertId == other.AdminAlertId ||
                    this.AdminAlertId != null &&
                    this.AdminAlertId.Equals(other.AdminAlertId)
                ) && 
                (
                    this.RelatedToAccountId == other.RelatedToAccountId ||
                    this.RelatedToAccountId != null &&
                    this.RelatedToAccountId.Equals(other.RelatedToAccountId)
                ) && 
                (
                    this.RelatedToUserId == other.RelatedToUserId ||
                    this.RelatedToUserId != null &&
                    this.RelatedToUserId.Equals(other.RelatedToUserId)
                ) && 
                (
                    this.OwnedByAdminId == other.OwnedByAdminId ||
                    this.OwnedByAdminId != null &&
                    this.OwnedByAdminId.Equals(other.OwnedByAdminId)
                ) && 
                (
                    this.Completed == other.Completed ||
                    this.Completed != null &&
                    this.Completed.Equals(other.Completed)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.EmailSent == other.EmailSent ||
                    this.EmailSent != null &&
                    this.EmailSent.Equals(other.EmailSent)
                ) && 
                (
                    this.SubjectId == other.SubjectId ||
                    this.SubjectId != null &&
                    this.SubjectId.Equals(other.SubjectId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.AdminAlertId != null)
                    hash = hash * 59 + this.AdminAlertId.GetHashCode();
                if (this.RelatedToAccountId != null)
                    hash = hash * 59 + this.RelatedToAccountId.GetHashCode();
                if (this.RelatedToUserId != null)
                    hash = hash * 59 + this.RelatedToUserId.GetHashCode();
                if (this.OwnedByAdminId != null)
                    hash = hash * 59 + this.OwnedByAdminId.GetHashCode();
                if (this.Completed != null)
                    hash = hash * 59 + this.Completed.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.EmailSent != null)
                    hash = hash * 59 + this.EmailSent.GetHashCode();
                if (this.SubjectId != null)
                    hash = hash * 59 + this.SubjectId.GetHashCode();
                return hash;
            }
        }
    }

}
