/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ContractMaturity
    /// </summary>
    [DataContract]
    public partial class ContractMaturity :  IEquatable<ContractMaturity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractMaturity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContractMaturity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractMaturity" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ProductId">id of Product (required).</param>
        /// <param name="ExpirationMonth">ExpirationMonth (required).</param>
        /// <param name="ExpirationDate">ExpirationDate (required).</param>
        /// <param name="FirstIntentDate">FirstIntentDate.</param>
        /// <param name="UnderlyingId">id of Contract.</param>
        /// <param name="IsFront">IsFront (required).</param>
        public ContractMaturity(int? Id = null, int? ProductId = null, int? ExpirationMonth = null, DateTime? ExpirationDate = null, DateTime? FirstIntentDate = null, int? UnderlyingId = null, bool? IsFront = null)
        {
            // to ensure "ProductId" is required (not null)
            if (ProductId == null)
            {
                throw new InvalidDataException("ProductId is a required property for ContractMaturity and cannot be null");
            }
            else
            {
                this.ProductId = ProductId;
            }
            // to ensure "ExpirationMonth" is required (not null)
            if (ExpirationMonth == null)
            {
                throw new InvalidDataException("ExpirationMonth is a required property for ContractMaturity and cannot be null");
            }
            else
            {
                this.ExpirationMonth = ExpirationMonth;
            }
            // to ensure "ExpirationDate" is required (not null)
            if (ExpirationDate == null)
            {
                throw new InvalidDataException("ExpirationDate is a required property for ContractMaturity and cannot be null");
            }
            else
            {
                this.ExpirationDate = ExpirationDate;
            }
            // to ensure "IsFront" is required (not null)
            if (IsFront == null)
            {
                throw new InvalidDataException("IsFront is a required property for ContractMaturity and cannot be null");
            }
            else
            {
                this.IsFront = IsFront;
            }
            this.Id = Id;
            this.FirstIntentDate = FirstIntentDate;
            this.UnderlyingId = UnderlyingId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Product
        /// </summary>
        /// <value>id of Product</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public int? ProductId { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationMonth
        /// </summary>
        [DataMember(Name="expirationMonth", EmitDefaultValue=false)]
        public int? ExpirationMonth { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// Gets or Sets FirstIntentDate
        /// </summary>
        [DataMember(Name="firstIntentDate", EmitDefaultValue=false)]
        public DateTime? FirstIntentDate { get; set; }
        /// <summary>
        /// id of Contract
        /// </summary>
        /// <value>id of Contract</value>
        [DataMember(Name="underlyingId", EmitDefaultValue=false)]
        public int? UnderlyingId { get; set; }
        /// <summary>
        /// Gets or Sets IsFront
        /// </summary>
        [DataMember(Name="isFront", EmitDefaultValue=false)]
        public bool? IsFront { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractMaturity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  FirstIntentDate: ").Append(FirstIntentDate).Append("\n");
            sb.Append("  UnderlyingId: ").Append(UnderlyingId).Append("\n");
            sb.Append("  IsFront: ").Append(IsFront).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContractMaturity);
        }

        /// <summary>
        /// Returns true if ContractMaturity instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractMaturity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractMaturity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.ExpirationMonth == other.ExpirationMonth ||
                    this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.FirstIntentDate == other.FirstIntentDate ||
                    this.FirstIntentDate != null &&
                    this.FirstIntentDate.Equals(other.FirstIntentDate)
                ) && 
                (
                    this.UnderlyingId == other.UnderlyingId ||
                    this.UnderlyingId != null &&
                    this.UnderlyingId.Equals(other.UnderlyingId)
                ) && 
                (
                    this.IsFront == other.IsFront ||
                    this.IsFront != null &&
                    this.IsFront.Equals(other.IsFront)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.ExpirationMonth != null)
                    hash = hash * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.FirstIntentDate != null)
                    hash = hash * 59 + this.FirstIntentDate.GetHashCode();
                if (this.UnderlyingId != null)
                    hash = hash * 59 + this.UnderlyingId.GetHashCode();
                if (this.IsFront != null)
                    hash = hash * 59 + this.IsFront.GetHashCode();
                return hash;
            }
        }
    }

}
