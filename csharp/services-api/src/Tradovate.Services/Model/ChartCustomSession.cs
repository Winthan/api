/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ChartCustomSession
    /// </summary>
    [DataContract]
    public partial class ChartCustomSession :  IEquatable<ChartCustomSession>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartCustomSession" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChartCustomSession() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartCustomSession" /> class.
        /// </summary>
        /// <param name="StartTime">StartTime (required).</param>
        /// <param name="StopTime">StopTime (required).</param>
        public ChartCustomSession(TradeTime StartTime = default(TradeTime), TradeTime StopTime = default(TradeTime))
        {
            // to ensure "StartTime" is required (not null)
            if (StartTime == null)
            {
                throw new InvalidDataException("StartTime is a required property for ChartCustomSession and cannot be null");
            }
            else
            {
                this.StartTime = StartTime;
            }
            // to ensure "StopTime" is required (not null)
            if (StopTime == null)
            {
                throw new InvalidDataException("StopTime is a required property for ChartCustomSession and cannot be null");
            }
            else
            {
                this.StopTime = StopTime;
            }
        }
        
        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public TradeTime StartTime { get; set; }
        /// <summary>
        /// Gets or Sets StopTime
        /// </summary>
        [DataMember(Name="stopTime", EmitDefaultValue=false)]
        public TradeTime StopTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartCustomSession {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChartCustomSession);
        }

        /// <summary>
        /// Returns true if ChartCustomSession instances are equal
        /// </summary>
        /// <param name="other">Instance of ChartCustomSession to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartCustomSession other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.StopTime == other.StopTime ||
                    this.StopTime != null &&
                    this.StopTime.Equals(other.StopTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.StopTime != null)
                    hash = hash * 59 + this.StopTime.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
