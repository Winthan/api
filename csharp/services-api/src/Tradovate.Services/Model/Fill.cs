/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// Fill
    /// </summary>
    [DataContract]
    public partial class Fill :  IEquatable<Fill>
    {
        /// <summary>
        /// Buy, Sell
        /// </summary>
        /// <value>Buy, Sell</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Buy for "Buy"
            /// </summary>
            [EnumMember(Value = "Buy")]
            Buy,
            
            /// <summary>
            /// Enum Sell for "Sell"
            /// </summary>
            [EnumMember(Value = "Sell")]
            Sell
        }

        /// <summary>
        /// Buy, Sell
        /// </summary>
        /// <value>Buy, Sell</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fill" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fill() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fill" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="OrderId">id of Order (required).</param>
        /// <param name="ContractId">id of Contract (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="TradeDate">TradeDate (required).</param>
        /// <param name="Action">Buy, Sell (required).</param>
        /// <param name="Qty">Qty (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="Active">Active (required).</param>
        /// <param name="FinallyPaired">FinallyPaired (required).</param>
        public Fill(int? Id = null, int? OrderId = null, int? ContractId = null, DateTime? Timestamp = null, TradeDate TradeDate = null, ActionEnum? Action = null, int? Qty = null, double? Price = null, bool? Active = null, int? FinallyPaired = null)
        {
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for Fill and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "ContractId" is required (not null)
            if (ContractId == null)
            {
                throw new InvalidDataException("ContractId is a required property for Fill and cannot be null");
            }
            else
            {
                this.ContractId = ContractId;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for Fill and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "TradeDate" is required (not null)
            if (TradeDate == null)
            {
                throw new InvalidDataException("TradeDate is a required property for Fill and cannot be null");
            }
            else
            {
                this.TradeDate = TradeDate;
            }
            // to ensure "Action" is required (not null)
            if (Action == null)
            {
                throw new InvalidDataException("Action is a required property for Fill and cannot be null");
            }
            else
            {
                this.Action = Action;
            }
            // to ensure "Qty" is required (not null)
            if (Qty == null)
            {
                throw new InvalidDataException("Qty is a required property for Fill and cannot be null");
            }
            else
            {
                this.Qty = Qty;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for Fill and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for Fill and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            // to ensure "FinallyPaired" is required (not null)
            if (FinallyPaired == null)
            {
                throw new InvalidDataException("FinallyPaired is a required property for Fill and cannot be null");
            }
            else
            {
                this.FinallyPaired = FinallyPaired;
            }
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// id of Order
        /// </summary>
        /// <value>id of Order</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }
        /// <summary>
        /// id of Contract
        /// </summary>
        /// <value>id of Contract</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public int? ContractId { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets TradeDate
        /// </summary>
        [DataMember(Name="tradeDate", EmitDefaultValue=false)]
        public TradeDate TradeDate { get; set; }
        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="qty", EmitDefaultValue=false)]
        public int? Qty { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// Gets or Sets FinallyPaired
        /// </summary>
        [DataMember(Name="finallyPaired", EmitDefaultValue=false)]
        public int? FinallyPaired { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fill {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  FinallyPaired: ").Append(FinallyPaired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Fill);
        }

        /// <summary>
        /// Returns true if Fill instances are equal
        /// </summary>
        /// <param name="other">Instance of Fill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fill other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.ContractId == other.ContractId ||
                    this.ContractId != null &&
                    this.ContractId.Equals(other.ContractId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.TradeDate == other.TradeDate ||
                    this.TradeDate != null &&
                    this.TradeDate.Equals(other.TradeDate)
                ) && 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Qty == other.Qty ||
                    this.Qty != null &&
                    this.Qty.Equals(other.Qty)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.FinallyPaired == other.FinallyPaired ||
                    this.FinallyPaired != null &&
                    this.FinallyPaired.Equals(other.FinallyPaired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.ContractId != null)
                    hash = hash * 59 + this.ContractId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.TradeDate != null)
                    hash = hash * 59 + this.TradeDate.GetHashCode();
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Qty != null)
                    hash = hash * 59 + this.Qty.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.FinallyPaired != null)
                    hash = hash * 59 + this.FinallyPaired.GetHashCode();
                return hash;
            }
        }
    }

}
