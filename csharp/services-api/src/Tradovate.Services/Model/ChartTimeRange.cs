/* 
 * Tradovate API
 *
 * Tradovate API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Tradovate.Services.Model
{
    /// <summary>
    /// ChartTimeRange
    /// </summary>
    [DataContract]
    public partial class ChartTimeRange :  IEquatable<ChartTimeRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartTimeRange" /> class.
        /// </summary>
        /// <param name="ClosestTimestamp">ClosestTimestamp.</param>
        /// <param name="ClosestTickId">ClosestTickId.</param>
        /// <param name="AsFarAsTimestamp">AsFarAsTimestamp.</param>
        /// <param name="AsMuchAsElements">AsMuchAsElements.</param>
        public ChartTimeRange(DateTime? ClosestTimestamp = default(DateTime?), int? ClosestTickId = default(int?), DateTime? AsFarAsTimestamp = default(DateTime?), int? AsMuchAsElements = default(int?))
        {
            this.ClosestTimestamp = ClosestTimestamp;
            this.ClosestTickId = ClosestTickId;
            this.AsFarAsTimestamp = AsFarAsTimestamp;
            this.AsMuchAsElements = AsMuchAsElements;
        }
        
        /// <summary>
        /// Gets or Sets ClosestTimestamp
        /// </summary>
        [DataMember(Name="closestTimestamp", EmitDefaultValue=false)]
        public DateTime? ClosestTimestamp { get; set; }
        /// <summary>
        /// Gets or Sets ClosestTickId
        /// </summary>
        [DataMember(Name="closestTickId", EmitDefaultValue=false)]
        public int? ClosestTickId { get; set; }
        /// <summary>
        /// Gets or Sets AsFarAsTimestamp
        /// </summary>
        [DataMember(Name="asFarAsTimestamp", EmitDefaultValue=false)]
        public DateTime? AsFarAsTimestamp { get; set; }
        /// <summary>
        /// Gets or Sets AsMuchAsElements
        /// </summary>
        [DataMember(Name="asMuchAsElements", EmitDefaultValue=false)]
        public int? AsMuchAsElements { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartTimeRange {\n");
            sb.Append("  ClosestTimestamp: ").Append(ClosestTimestamp).Append("\n");
            sb.Append("  ClosestTickId: ").Append(ClosestTickId).Append("\n");
            sb.Append("  AsFarAsTimestamp: ").Append(AsFarAsTimestamp).Append("\n");
            sb.Append("  AsMuchAsElements: ").Append(AsMuchAsElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChartTimeRange);
        }

        /// <summary>
        /// Returns true if ChartTimeRange instances are equal
        /// </summary>
        /// <param name="other">Instance of ChartTimeRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartTimeRange other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClosestTimestamp == other.ClosestTimestamp ||
                    this.ClosestTimestamp != null &&
                    this.ClosestTimestamp.Equals(other.ClosestTimestamp)
                ) && 
                (
                    this.ClosestTickId == other.ClosestTickId ||
                    this.ClosestTickId != null &&
                    this.ClosestTickId.Equals(other.ClosestTickId)
                ) && 
                (
                    this.AsFarAsTimestamp == other.AsFarAsTimestamp ||
                    this.AsFarAsTimestamp != null &&
                    this.AsFarAsTimestamp.Equals(other.AsFarAsTimestamp)
                ) && 
                (
                    this.AsMuchAsElements == other.AsMuchAsElements ||
                    this.AsMuchAsElements != null &&
                    this.AsMuchAsElements.Equals(other.AsMuchAsElements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClosestTimestamp != null)
                    hash = hash * 59 + this.ClosestTimestamp.GetHashCode();
                if (this.ClosestTickId != null)
                    hash = hash * 59 + this.ClosestTickId.GetHashCode();
                if (this.AsFarAsTimestamp != null)
                    hash = hash * 59 + this.AsFarAsTimestamp.GetHashCode();
                if (this.AsMuchAsElements != null)
                    hash = hash * 59 + this.AsMuchAsElements.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
